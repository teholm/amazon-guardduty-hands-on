{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Hands on with Amazon GuardDuty The AWS Workshop Studio is the central site to view workshops created by the teams at Amazon Web Services (AWS). Workshops are hands-on events designed to teach or introduce practical skills, techniques, or concepts which you can use to solve business problems. Please visit: Amazon GuardDuty Workshop for the new version of this workshop.","title":"Overview"},{"location":"#getting-hands-on-with-amazon-guardduty","text":"","title":"Getting Hands on with Amazon GuardDuty"},{"location":"#the-aws-workshop-studio-is-the-central-site-to-view-workshops-created-by-the-teams-at-amazon-web-services-aws-workshops-are-hands-on-events-designed-to-teach-or-introduce-practical-skills-techniques-or-concepts-which-you-can-use-to-solve-business-problems","text":"","title":"The AWS Workshop Studio is the central site to view workshops created by the teams at Amazon Web Services (AWS). Workshops are hands-on events designed to teach or introduce practical skills, techniques, or concepts which you can use to solve business problems."},{"location":"#please-visit-amazon-guardduty-workshop-for-the-new-version-of-this-workshop","text":"","title":"Please visit: Amazon GuardDuty Workshop for the new version of this workshop."},{"location":"contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing Guidelines"},{"location":"contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.","title":"Finding contributions to work on"},{"location":"contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"setup/","text":"Environment Setup Prerequisites AWS Account : Given that you will be simulating attacks and doing remediations, you should run this in a non-production account. After running through these scenarios, you can look at how you can implement GuardDuty and associated automated remediation workflows in a multi-account structure so you are able to aggregate findings from other accounts and use the service in a more scalable manner. Admin privileges : Ensure you are using an AWS IAM User with Admin privileges. AWS CLI : You will be using the AWS CLI for simulating one of the attacks so be sure you have installed on your local machine. All of the links assume you are using the us-west-2 (Oregon) region. Deploy the environment AWS Sponsored Event Navigate to the Event Engine dashboard Enter your team hash code. Click AWS Console . Please use the us-west-2 (Oregon) region for this workshop. Let's enable GuardDuty, in just 2 clicks! Navigate to the GuardDuty Console and click Get Started . On the next screen click Enable GuardDuty . Click Deploy to AWS to launch the CloudFormation stack to setup the lab environment. Please note we are using the US West 2 (Oregon): Click the Deploy to AWS button above. This will automatically take you to the console to run the template. Click Next on the Specify Template page. Under Parameters Enter your EmailAddress to receive the notifications during the lab, on the Specify stack details page. Then click Next Scroll down and click Next on the Configure stack options page. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create stack . You should see an email with subject AWS Notification - Subscription Confirmation . Please click on Confirm Subscription which will ensure you receive notifications during the lab. This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . Individual Let's enable GuardDuty, in just 2 clicks! Please use the us-west-2 (Oregon) region for this workshop. Navigate to the GuardDuty Console and click Get Started . On the next screen click Enable GuardDuty . Click Deploy to AWS to launch the CloudFormation stack to setup the lab environment. Please note we are using the US West 2 (Oregon): Click the Deploy to AWS button above. This will automatically take you to the console to run the template. Click Next on the Specify Template page. Under Parameters Enter your EmailAddress to receive the notifications during the lab, on the Specify stack details page. Then click Next Scroll down and click Next on the Configure stack options page. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create stack . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . You should see an email with subject AWS Notification - Subscription Confirmation . Please click on Confirm Subscription which will ensure you receive notifications during the lab. While we wait for our CloudFormation stack to complete, take 5 minutes to read about GuardDuty data sources and findings . Then check back to confirm the CloudFormation build has completed, move onto to What is created? section below. How GuardDuty Works Data Sources From the moment you enable GuardDuty it begins analyzing all of the VPC Flow Logs, CloudTrail logs, and DNS Logs in that region. DNS Logs are generated from the default AWS DNS resolvers used for your VPCs and are not an available data source to customers. If you are using a 3rd party DNS resolver or if you set up your own DNS resolvers, then GuardDuty cannot access, process, and identify threats from that data source. GuardDuty accesses all of these data sources without any of them having to be enabled; although it is a best practice to enable CloudTrail and VPC Flow Logs for your own analysis. GuardDuty is a regional service so in order for the service to monitor these data sources in other regions you will need to enable it in those regions. You can accomplish this by following the same steps above and enabling it through the console but most customers are using the APIs to programmatically enable it in all regions and across multiple accounts. Regardless of the number of VPCs, IAM users, or other AWS resources in your account, there is no impact to your resources because all of the processing is being done within the managed service. The pricing for GuardDuty is based on the quantity of AWS CloudTrail Events analyzed and the volume of Amazon VPC Flow Log and DNS Log data analyzed (per GB). Each region in an AWS Account has a free 30-day trial to better forecast what the cost of the service will be. Findings Now that GuardDuty is enabled it is actively monitoring the three data sources for malicious or unauthorized behavior as it relates to your EC2 instances and AWS IAM Principals. You should be taken directly to the Findings tab which will show finding details as GuardDuty detects them. After deploying the scenario, you will start to see GuardDuty findings being detected. Each finding is broken down into the following format to allow for a concise yet readable description of potential security issues. ThreatPurpose : ResourceTypeAffected / ThreatFamilyName . ThreatFamilyVariant ! Artifact Click here for a description of each part. The more advanced behavioral and machine learning detections require a baseline (7 - 14 days) to be established so GuardDuty is able to learn the regular behavior and identity anomalies. An example of a finding that requires a baseline would be if an EC2 instance started communicating with a remote host on an unusual port or an IAM User who has no prior history of modifying Route Tables starts making modifications. All of the findings generated in these scenarios will be based on signatures, so the findings will be detected 10 minutes after the completion of the CloudFormation stack. The delay is due to the amount of time it takes for the information about a threat to appear in one of the data sources and the amount of time it takes for GuardDuty to access and analyze that particular data source. Click here for a complete list of current GuardDuty finding types. GuardDuty sends notifications based on Amazon CloudWatch Events when any change in the findings takes place. These notifications are sent within 5 minutes of the finding. All subsequent occurrences of an existing finding will have the same ID as the original finding and notifications will be sent every 6 hours after the initial notification. This is to eliminate alert fatigue due to the same finding. The initial findings will begin to show up in GuardDuty 10 minutes after the CloudFormation stack creation completes. What is created? The CloudFormation template will create the following resources: Four Amazon EC2 Instances (and supporting network infrastructure) Two Instances that contain the name \u201c Compromised Instance \u201d Two instance that contains the name \u201c Malicious Instance \u201d AWS IAM Role For EC2 which will have permissions to SSM Parameter Store and DynamoDB One Amazon SNS Topic so you will be able to receive notifications Four AWS CloudWatch Event rules for triggering the appropriate notification or remediation Two AWS Lambda functions that will be used for remediating findings and will have permissions to modify Security Groups and revoke active IAM Role sessions (on only the IAM Role associated with this scenario) AWS Systems Manager Parameter Store value for storing a fake database password. Three S3 buckets . Make sure the CloudFormation stack is in a CREATE_COMPLETE status before moving on.","title":"Environment Setup"},{"location":"setup/#environment-setup","text":"","title":"Environment Setup"},{"location":"setup/#prerequisites","text":"AWS Account : Given that you will be simulating attacks and doing remediations, you should run this in a non-production account. After running through these scenarios, you can look at how you can implement GuardDuty and associated automated remediation workflows in a multi-account structure so you are able to aggregate findings from other accounts and use the service in a more scalable manner. Admin privileges : Ensure you are using an AWS IAM User with Admin privileges. AWS CLI : You will be using the AWS CLI for simulating one of the attacks so be sure you have installed on your local machine. All of the links assume you are using the us-west-2 (Oregon) region.","title":"Prerequisites"},{"location":"setup/#deploy-the-environment","text":"AWS Sponsored Event Navigate to the Event Engine dashboard Enter your team hash code. Click AWS Console . Please use the us-west-2 (Oregon) region for this workshop. Let's enable GuardDuty, in just 2 clicks! Navigate to the GuardDuty Console and click Get Started . On the next screen click Enable GuardDuty . Click Deploy to AWS to launch the CloudFormation stack to setup the lab environment. Please note we are using the US West 2 (Oregon): Click the Deploy to AWS button above. This will automatically take you to the console to run the template. Click Next on the Specify Template page. Under Parameters Enter your EmailAddress to receive the notifications during the lab, on the Specify stack details page. Then click Next Scroll down and click Next on the Configure stack options page. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create stack . You should see an email with subject AWS Notification - Subscription Confirmation . Please click on Confirm Subscription which will ensure you receive notifications during the lab. This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . Individual Let's enable GuardDuty, in just 2 clicks! Please use the us-west-2 (Oregon) region for this workshop. Navigate to the GuardDuty Console and click Get Started . On the next screen click Enable GuardDuty . Click Deploy to AWS to launch the CloudFormation stack to setup the lab environment. Please note we are using the US West 2 (Oregon): Click the Deploy to AWS button above. This will automatically take you to the console to run the template. Click Next on the Specify Template page. Under Parameters Enter your EmailAddress to receive the notifications during the lab, on the Specify stack details page. Then click Next Scroll down and click Next on the Configure stack options page. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create stack . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . You should see an email with subject AWS Notification - Subscription Confirmation . Please click on Confirm Subscription which will ensure you receive notifications during the lab. While we wait for our CloudFormation stack to complete, take 5 minutes to read about GuardDuty data sources and findings . Then check back to confirm the CloudFormation build has completed, move onto to What is created? section below.","title":"Deploy the environment"},{"location":"setup/#how-guardduty-works","text":"","title":"How GuardDuty Works"},{"location":"setup/#data-sources","text":"From the moment you enable GuardDuty it begins analyzing all of the VPC Flow Logs, CloudTrail logs, and DNS Logs in that region. DNS Logs are generated from the default AWS DNS resolvers used for your VPCs and are not an available data source to customers. If you are using a 3rd party DNS resolver or if you set up your own DNS resolvers, then GuardDuty cannot access, process, and identify threats from that data source. GuardDuty accesses all of these data sources without any of them having to be enabled; although it is a best practice to enable CloudTrail and VPC Flow Logs for your own analysis. GuardDuty is a regional service so in order for the service to monitor these data sources in other regions you will need to enable it in those regions. You can accomplish this by following the same steps above and enabling it through the console but most customers are using the APIs to programmatically enable it in all regions and across multiple accounts. Regardless of the number of VPCs, IAM users, or other AWS resources in your account, there is no impact to your resources because all of the processing is being done within the managed service. The pricing for GuardDuty is based on the quantity of AWS CloudTrail Events analyzed and the volume of Amazon VPC Flow Log and DNS Log data analyzed (per GB). Each region in an AWS Account has a free 30-day trial to better forecast what the cost of the service will be.","title":"Data Sources"},{"location":"setup/#findings","text":"Now that GuardDuty is enabled it is actively monitoring the three data sources for malicious or unauthorized behavior as it relates to your EC2 instances and AWS IAM Principals. You should be taken directly to the Findings tab which will show finding details as GuardDuty detects them. After deploying the scenario, you will start to see GuardDuty findings being detected. Each finding is broken down into the following format to allow for a concise yet readable description of potential security issues. ThreatPurpose : ResourceTypeAffected / ThreatFamilyName . ThreatFamilyVariant ! Artifact Click here for a description of each part. The more advanced behavioral and machine learning detections require a baseline (7 - 14 days) to be established so GuardDuty is able to learn the regular behavior and identity anomalies. An example of a finding that requires a baseline would be if an EC2 instance started communicating with a remote host on an unusual port or an IAM User who has no prior history of modifying Route Tables starts making modifications. All of the findings generated in these scenarios will be based on signatures, so the findings will be detected 10 minutes after the completion of the CloudFormation stack. The delay is due to the amount of time it takes for the information about a threat to appear in one of the data sources and the amount of time it takes for GuardDuty to access and analyze that particular data source. Click here for a complete list of current GuardDuty finding types. GuardDuty sends notifications based on Amazon CloudWatch Events when any change in the findings takes place. These notifications are sent within 5 minutes of the finding. All subsequent occurrences of an existing finding will have the same ID as the original finding and notifications will be sent every 6 hours after the initial notification. This is to eliminate alert fatigue due to the same finding. The initial findings will begin to show up in GuardDuty 10 minutes after the CloudFormation stack creation completes.","title":"Findings"},{"location":"setup/#what-is-created","text":"The CloudFormation template will create the following resources: Four Amazon EC2 Instances (and supporting network infrastructure) Two Instances that contain the name \u201c Compromised Instance \u201d Two instance that contains the name \u201c Malicious Instance \u201d AWS IAM Role For EC2 which will have permissions to SSM Parameter Store and DynamoDB One Amazon SNS Topic so you will be able to receive notifications Four AWS CloudWatch Event rules for triggering the appropriate notification or remediation Two AWS Lambda functions that will be used for remediating findings and will have permissions to modify Security Groups and revoke active IAM Role sessions (on only the IAM Role associated with this scenario) AWS Systems Manager Parameter Store value for storing a fake database password. Three S3 buckets . Make sure the CloudFormation stack is in a CREATE_COMPLETE status before moving on.","title":"What is created?"},{"location":"summary/","text":"Summary By walking through these scenarios you generated, analyzed, and remediated some or all of the following findings in your environment: UnauthorizedAccess:EC2/MaliciousIPCaller.Custom Recon:IAMUser/MaliciousIPCaller.Custom UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom Discovery:S3/MaliciousIPCaller.Custom UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS Stealth:S3/ServerAccessLoggingDisabled Policy:S3/AccountBlockPublicAccessDisabled Now that you understand the different components of the GuardDuty service and how it integrates with other AWS services, you can explore ways of using it across your own environments. Cleanup To remove the assets created by the CloudFormation, follow these steps: Delete the S3 buckets that were created by the CloudFormation template (it will have names that begins with guardduty-example ). This needs to be done because data was put in the bucket and CloudFormation will not allow you to delete a bucket with data in it. Delete the compromised instance IAM Roles (it will have the name GuardDuty-Example-EC2-Compromised ). Because one of the Lambda functions added an additional policy to this Role you need to manually delete this. Delete the custom Threat List within GuardDuty. Within the GuardDuty console click Lists in the left navigation. From there delete the Example-Threat-List . Disable GuardDuty. Within the GuardDuty console click Settings . Then check the box to Disable GuardDuty and save. Suspending GuardDuty stops the service from monitoring so you don't incur any costs and won't receive any findings but it will retain your existing findings and baseline activity. Delete the CloudFormation Stack. If you see any errors, it means you didn't delete the S3 Bucket or IAM role in the previous steps.","title":"Summary"},{"location":"summary/#summary","text":"By walking through these scenarios you generated, analyzed, and remediated some or all of the following findings in your environment: UnauthorizedAccess:EC2/MaliciousIPCaller.Custom Recon:IAMUser/MaliciousIPCaller.Custom UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom Discovery:S3/MaliciousIPCaller.Custom UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS Stealth:S3/ServerAccessLoggingDisabled Policy:S3/AccountBlockPublicAccessDisabled Now that you understand the different components of the GuardDuty service and how it integrates with other AWS services, you can explore ways of using it across your own environments.","title":"Summary"},{"location":"summary/#cleanup","text":"To remove the assets created by the CloudFormation, follow these steps: Delete the S3 buckets that were created by the CloudFormation template (it will have names that begins with guardduty-example ). This needs to be done because data was put in the bucket and CloudFormation will not allow you to delete a bucket with data in it. Delete the compromised instance IAM Roles (it will have the name GuardDuty-Example-EC2-Compromised ). Because one of the Lambda functions added an additional policy to this Role you need to manually delete this. Delete the custom Threat List within GuardDuty. Within the GuardDuty console click Lists in the left navigation. From there delete the Example-Threat-List . Disable GuardDuty. Within the GuardDuty console click Settings . Then check the box to Disable GuardDuty and save. Suspending GuardDuty stops the service from monitoring so you don't incur any costs and won't receive any findings but it will retain your existing findings and baseline activity. Delete the CloudFormation Stack. If you see any errors, it means you didn't delete the S3 Bucket or IAM role in the previous steps.","title":"Cleanup"},{"location":"scenario1/","text":"Compromised EC2 Instance Scene simulation After an uneventful yet unnecessarily long commute to work, you arrived at the office on Monday morning. You grabbed a cup of coffee, sat down in your cube, opened up your laptop and begin to go through your emails. Soon after you begin though you start receiving emails indicating that GuardDuty has detected new threats. You don\u2019t yet know the extent of the threats but you quickly begin to investigate. Now the good news is that your coworker Alice has already set up some hooks for specific findings so that they will be automatically remediated. The first email you receive from GuardDuty indicates that one of your EC2 instances might be compromised: GuardDuty Finding | ID: 1xx: The EC2 instance i-xxxxxxxxx may be compromised and should be investigated Shortly after the first email, you receive a second email indicating that the same GuardDuty finding has been remediated: GuardDuty Remediation | ID: 1xx: GuardDuty discovered an EC2 instance (Instance ID: i-xxx) that is communicating outbound with an IP Address on a threat list that you uploaded. All security groups have been removed and it has been isolated. Please follow up with any additional remediation actions. Architecture Overview The compromised instance pings the EIP of the malicious instance . That EIP is in a custom threat list. GuardDuty is monitoring the VPC Flow Logs (in addition to CloudTrail and DNS Logs) and analyzing this based on threat lists, machine learning, baselines, etc. GuardDuty generates a finding and sends this to the GuardDuty console and CloudWatch Events. The CloudWatch Event rule triggers an SNS topic and a Lambda function. SNS sends you an e-mail with the finding information. A Lambda function isolates the compromised instance . When Alice setup the hook for notifications she only included certain information about the finding because she had also setup a Lambda function to automatically isolate the instance and send out the details of the remediation. Since the finding has been remediated you decide you still want to take a closer look at the setup Alice currently has in place. Investigation Browse to the GuardDuty console to investigate Although you can view the GuardDuty findings in the console, most customers aggregate all findings across their regions and accounts to a central security information and event management (SIEM) system for analysis and remediation. A common approach for aggregating these findings is to setup GuardDuty in a Administrator/Member structure and then use a workflow including CloudWatch Event Rules and Lambda Functions to push findings to your SIEM or a centralized logging framework. There are also partner solutions that publish Lambda Function Blueprints to make it easier to consolidate findings. Navigate to the GuardDuty Console (us-west-2). If there is nothing displayed click the refresh button. A finding should show up with the type UnauthorizedAccess:EC2/MaliciousIPCaller.Custom . Based on the format you reviewed earlier can you determine the security issue by the finding type? The quick view of the finding shows a severity symbol, the finding type, the affected resource, the last time the finding was detected, and a count of the subsequent occurrences of an existing finding. Findings are available in the service for 90 days. The finding type indicates that an EC2 instance in your environment is communicating outbound to an IP address included on a custom threat list . Click on Lists in the left navigation to view the custom threat list Alice added. GuardDuty uses managed threat intelligence provided by AWS Security and third-party providers, such as ProofPoint and CrowdStike. You can expand the monitoring scope of GuardDuty by configuring it to use your own custom trusted IP lists and threat lists. If you setup a Administrator/Member GuardDuty structure, users from the Administrator GuardDuty account can manage trusted IP lists and threats lists and they are inherited by the member accounts. Users from the member accounts are not able to modify the lists. Scenario Note The EC2 instance indicated by this finding is actually just connecting to an Elastic IP (EIP) on another instance in the same VPC to keep the scenario localized to your environment. The CloudFormation template automatically created the threat list and added the EIP for the malicious instance to the list. View the CloudWatch Event rule Alice used CloudWatch Event Rules to send the email you received about the findings and also to take remediations steps. Examine the CloudWatch Events console to understand what Alice configured and to see how the remediation was triggered. Navigate to the CloudWatch Console (us-west-2) and on the left navigation, under the Events section, click Rules . You will see three Rules in the list that were created by the CloudFormation template. All of these begin with the prefix \u201c GuardDuty-Event .\" Click on the rule named GuardDuty-Event-EC2-MaliciousIPCaller . Under the Targets section you will see two entries, one for a Lambda function and one for an SNS Topic. The CloudWatch Event Rule publishes the finding to the SNS Topic which in turn sends out an email notification. Rather than sending the entire JSON event you can see how Alice customized the email by using an input transformer . You can use the input transformer feature of CloudWatch Events to customize the text that is taken from an event before it is input to the target of a rule. View the Remediation Lambda function The Lambda function is what handles the remediation logic for this finding. Alice setup the Lambda function to remove the compromised instance from its current security group and add it to one with no ingress or egress rules so that the instance is isolated from the network. Click the Name for the Lambda function in the Targets section to evaluate the remediation logic. Collapse the Designer tab and scroll down to view the code for this function (walking through the code logic is outside the scope of this scenario). You can also click the Monitoring tab and view the invocation details for this function. What permissions does the Lambda Function need to perform the remediation? Verify that the remediation was successful Next, double check the effects of the remediation to ensure the instance is isolated. At this point you have the instance ID of the compromised instance from the email notifications and the name of the isolation security group name from reviewing the Lambda Function code. Browse to the EC2 console (us-west-2) and click Running Instances . You should see four instances with names that begin with GuardDuty-Example . Click on the instance with the instance ID you saw in the GuardDuty finding or email notifications. GuardDuty-Example: Compromised Instance: Scenario 1 . After reviewing the remediation Lambda Function you know that the instance should now have the Security Group with a name that includes ForensicSecurityGroup . Under the Security tab verify the instance has this security group. Initially, all four of the instances launched by the CloudFormation template were in the Security Group with a name that includes TargetSecurityGroup . The Lambda function removed the TargetSecurityGroup from the instance and added the ForensicsSecurityGroup to isolate the instance. Click on the ForensicSecurityGroup and view the ingress and egress rules. Questions Which data source did GuardDuty use to identify this threat? Will isolating the instance have any effect on an application running on the instance? How could you add more detail to the email notifications?","title":"Compromised EC2 Instance"},{"location":"scenario1/#compromised-ec2-instance","text":"","title":"Compromised EC2 Instance"},{"location":"scenario1/#scene-simulation","text":"After an uneventful yet unnecessarily long commute to work, you arrived at the office on Monday morning. You grabbed a cup of coffee, sat down in your cube, opened up your laptop and begin to go through your emails. Soon after you begin though you start receiving emails indicating that GuardDuty has detected new threats. You don\u2019t yet know the extent of the threats but you quickly begin to investigate. Now the good news is that your coworker Alice has already set up some hooks for specific findings so that they will be automatically remediated. The first email you receive from GuardDuty indicates that one of your EC2 instances might be compromised: GuardDuty Finding | ID: 1xx: The EC2 instance i-xxxxxxxxx may be compromised and should be investigated Shortly after the first email, you receive a second email indicating that the same GuardDuty finding has been remediated: GuardDuty Remediation | ID: 1xx: GuardDuty discovered an EC2 instance (Instance ID: i-xxx) that is communicating outbound with an IP Address on a threat list that you uploaded. All security groups have been removed and it has been isolated. Please follow up with any additional remediation actions.","title":"Scene simulation"},{"location":"scenario1/#architecture-overview","text":"The compromised instance pings the EIP of the malicious instance . That EIP is in a custom threat list. GuardDuty is monitoring the VPC Flow Logs (in addition to CloudTrail and DNS Logs) and analyzing this based on threat lists, machine learning, baselines, etc. GuardDuty generates a finding and sends this to the GuardDuty console and CloudWatch Events. The CloudWatch Event rule triggers an SNS topic and a Lambda function. SNS sends you an e-mail with the finding information. A Lambda function isolates the compromised instance . When Alice setup the hook for notifications she only included certain information about the finding because she had also setup a Lambda function to automatically isolate the instance and send out the details of the remediation. Since the finding has been remediated you decide you still want to take a closer look at the setup Alice currently has in place.","title":"Architecture Overview"},{"location":"scenario1/#investigation","text":"","title":"Investigation"},{"location":"scenario1/#browse-to-the-guardduty-console-to-investigate","text":"Although you can view the GuardDuty findings in the console, most customers aggregate all findings across their regions and accounts to a central security information and event management (SIEM) system for analysis and remediation. A common approach for aggregating these findings is to setup GuardDuty in a Administrator/Member structure and then use a workflow including CloudWatch Event Rules and Lambda Functions to push findings to your SIEM or a centralized logging framework. There are also partner solutions that publish Lambda Function Blueprints to make it easier to consolidate findings. Navigate to the GuardDuty Console (us-west-2). If there is nothing displayed click the refresh button. A finding should show up with the type UnauthorizedAccess:EC2/MaliciousIPCaller.Custom . Based on the format you reviewed earlier can you determine the security issue by the finding type? The quick view of the finding shows a severity symbol, the finding type, the affected resource, the last time the finding was detected, and a count of the subsequent occurrences of an existing finding. Findings are available in the service for 90 days. The finding type indicates that an EC2 instance in your environment is communicating outbound to an IP address included on a custom threat list . Click on Lists in the left navigation to view the custom threat list Alice added. GuardDuty uses managed threat intelligence provided by AWS Security and third-party providers, such as ProofPoint and CrowdStike. You can expand the monitoring scope of GuardDuty by configuring it to use your own custom trusted IP lists and threat lists. If you setup a Administrator/Member GuardDuty structure, users from the Administrator GuardDuty account can manage trusted IP lists and threats lists and they are inherited by the member accounts. Users from the member accounts are not able to modify the lists. Scenario Note The EC2 instance indicated by this finding is actually just connecting to an Elastic IP (EIP) on another instance in the same VPC to keep the scenario localized to your environment. The CloudFormation template automatically created the threat list and added the EIP for the malicious instance to the list.","title":"Browse to the GuardDuty console to investigate"},{"location":"scenario1/#view-the-cloudwatch-event-rule","text":"Alice used CloudWatch Event Rules to send the email you received about the findings and also to take remediations steps. Examine the CloudWatch Events console to understand what Alice configured and to see how the remediation was triggered. Navigate to the CloudWatch Console (us-west-2) and on the left navigation, under the Events section, click Rules . You will see three Rules in the list that were created by the CloudFormation template. All of these begin with the prefix \u201c GuardDuty-Event .\" Click on the rule named GuardDuty-Event-EC2-MaliciousIPCaller . Under the Targets section you will see two entries, one for a Lambda function and one for an SNS Topic. The CloudWatch Event Rule publishes the finding to the SNS Topic which in turn sends out an email notification. Rather than sending the entire JSON event you can see how Alice customized the email by using an input transformer . You can use the input transformer feature of CloudWatch Events to customize the text that is taken from an event before it is input to the target of a rule.","title":"View the CloudWatch Event rule"},{"location":"scenario1/#view-the-remediation-lambda-function","text":"The Lambda function is what handles the remediation logic for this finding. Alice setup the Lambda function to remove the compromised instance from its current security group and add it to one with no ingress or egress rules so that the instance is isolated from the network. Click the Name for the Lambda function in the Targets section to evaluate the remediation logic. Collapse the Designer tab and scroll down to view the code for this function (walking through the code logic is outside the scope of this scenario). You can also click the Monitoring tab and view the invocation details for this function. What permissions does the Lambda Function need to perform the remediation?","title":"View the Remediation Lambda function"},{"location":"scenario1/#verify-that-the-remediation-was-successful","text":"Next, double check the effects of the remediation to ensure the instance is isolated. At this point you have the instance ID of the compromised instance from the email notifications and the name of the isolation security group name from reviewing the Lambda Function code. Browse to the EC2 console (us-west-2) and click Running Instances . You should see four instances with names that begin with GuardDuty-Example . Click on the instance with the instance ID you saw in the GuardDuty finding or email notifications. GuardDuty-Example: Compromised Instance: Scenario 1 . After reviewing the remediation Lambda Function you know that the instance should now have the Security Group with a name that includes ForensicSecurityGroup . Under the Security tab verify the instance has this security group. Initially, all four of the instances launched by the CloudFormation template were in the Security Group with a name that includes TargetSecurityGroup . The Lambda function removed the TargetSecurityGroup from the instance and added the ForensicsSecurityGroup to isolate the instance. Click on the ForensicSecurityGroup and view the ingress and egress rules.","title":"Verify that the remediation was successful"},{"location":"scenario1/#questions","text":"Which data source did GuardDuty use to identify this threat? Will isolating the instance have any effect on an application running on the instance? How could you add more detail to the email notifications?","title":"Questions"},{"location":"scenario2/","text":"Compromised IAM credentials (simulated) You have completed the examination of the first attack, confirmed it was properly remediated, and then sat back to take your first sip of coffee for the day when you notice an additional email about new findings. The first of the new findings indicates that an API call was made using AWS IAM credentials from an IP address on a custom threat list. None of your personal IAM credentials have actually been compromised or exposed in any way. Architecture Overview The malicious instance makes API calls. The EIP on the instance is in a custom threat list. API calls are logged in CloudTrail GuardDuty is monitoring the CloudTrail Logs (in addition to VPC Flow Logs and DNS Logs) and analyzing this based on threat list, machine learning, baselines, etc. GuardDuty generates findings and sends this to the GuardDuty console and CloudWatch Events. The CloudWatch Event rule triggers an SNS topic. SNS sends you an e-mail with the finding information. Investigation Browse to the GuardDuty console to investigate To view the findings: Navigate to the GuardDuty Console (us-west-2). Click the icon to refresh the GuardDuty console. You should now see additional findings that are related to Recon:IAMUser , UnauthorizedAccess:IAMUser and Discovery:S3 . Based on the format you reviewed earlier can you determine the security issues by the finding type? Click on the UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom finding to view the full details. You can see the finding details include information about what happened, what AWS resources were involved in the suspicious activity, when this activity took place, and other additional information. Under Resource Affected , find the User Name associated with this finding. Lets see another finding, click on Discovery:S3/MaliciousIPCaller.Custom to view the details. Just like the previous finding, you can see details about what happened and the details of the threat. In this specific case a ListObjects API call was run which is a data plane API event for S3, that is why this finding was separately categorized as a S3 discovery finding. More on S3 control plane events vs data plane events in the \"Compromised S3 Bucket\" section. These findings indicates that the IAM credentials (of the user you found above) are possibly compromised because API calls using those credentials are being made from an IP address on a custom threat list. What actions did this AWS IAM User take? Click on each of the findings, You can see under Action and then API that GetParameters , ListObjects , and ListTables API calls were made but how can you view the rest of the actions made by this user over the past hour or day? GuardDuty is able to analyze large volumes of data and identify true threats in your environment but from an investigation and remediation stand point it is still important to correlate other data to understand the full scope of the threat. In this case an analyst would use the details in this finding to pinpoint historical user activity in CloudTrail. AWS also has a threat hunting tool called Detective that can help with further investigation. Scenario Note These IAM findings are being generated by the \u201cmalicious EC2\u201d instance making API calls. These API calls generate findings because the EIP of that instance is in a custom threat list. View the CloudWatch Event rule Navigate to the CloudWatch console and on the left navigation, under the Events section, click Rules . Click on the rule that Alice configured for this particular finding ( GuardDuty-Event-IAMUser-MaliciousIPCaller ). Under the Targets section, you will see a rule for an SNS Topic. Turns out Alice did not set up a Lambda function to remediate this threat because the decision by the security team was to manually investigate and remediate this particular type of finding. Since GuardDuty integrates with CloudWatch Events you have the flexibility to put in place full or partial automated remediation workflows. These could be custom Lambda Functions that you build out or maybe even partner solutions. You can also configure other AWS Resources as targets in your CloudWatch Event Rules such as SSM Run Commands or Step Functions state machines. For some finding types you may choose to have only notification workflows and require manual remediation steps. As you design these workflows it is important to evaluate the workloads running in your environments to see what effects a remediation could have. Manually remediate the finding Since Alice did not setup a remediation for this finding, you have to manually remediate this. While the security team is analyzing the previous activity of this user to better understand the scope of the compromise, you need to disable the access key associated with the user to prevent any more unauthorized actions. Browse to the AWS IAM console. Click Users in the left navigation. Click on the user you identified in the GuardDuty finding and email notifications ( GuardDuty-Example-Compromised-Simulated ). Click the Security Credentials tab. Under Access Keys , find the Access Key ID you identified in the finding, click Make Inactive and then click Deactivate . Questions Which data source did GuardDuty use to identify this threat? What permissions did the user have? Why would the security team decide against setting up an automated remediation?","title":"Index"},{"location":"scenario2/#compromised-iam-credentials-simulated","text":"You have completed the examination of the first attack, confirmed it was properly remediated, and then sat back to take your first sip of coffee for the day when you notice an additional email about new findings. The first of the new findings indicates that an API call was made using AWS IAM credentials from an IP address on a custom threat list. None of your personal IAM credentials have actually been compromised or exposed in any way.","title":"Compromised IAM credentials (simulated)"},{"location":"scenario2/#architecture-overview","text":"The malicious instance makes API calls. The EIP on the instance is in a custom threat list. API calls are logged in CloudTrail GuardDuty is monitoring the CloudTrail Logs (in addition to VPC Flow Logs and DNS Logs) and analyzing this based on threat list, machine learning, baselines, etc. GuardDuty generates findings and sends this to the GuardDuty console and CloudWatch Events. The CloudWatch Event rule triggers an SNS topic. SNS sends you an e-mail with the finding information.","title":"Architecture Overview"},{"location":"scenario2/#investigation","text":"","title":"Investigation"},{"location":"scenario2/#browse-to-the-guardduty-console-to-investigate","text":"To view the findings: Navigate to the GuardDuty Console (us-west-2). Click the icon to refresh the GuardDuty console. You should now see additional findings that are related to Recon:IAMUser , UnauthorizedAccess:IAMUser and Discovery:S3 . Based on the format you reviewed earlier can you determine the security issues by the finding type? Click on the UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom finding to view the full details. You can see the finding details include information about what happened, what AWS resources were involved in the suspicious activity, when this activity took place, and other additional information. Under Resource Affected , find the User Name associated with this finding. Lets see another finding, click on Discovery:S3/MaliciousIPCaller.Custom to view the details. Just like the previous finding, you can see details about what happened and the details of the threat. In this specific case a ListObjects API call was run which is a data plane API event for S3, that is why this finding was separately categorized as a S3 discovery finding. More on S3 control plane events vs data plane events in the \"Compromised S3 Bucket\" section. These findings indicates that the IAM credentials (of the user you found above) are possibly compromised because API calls using those credentials are being made from an IP address on a custom threat list. What actions did this AWS IAM User take? Click on each of the findings, You can see under Action and then API that GetParameters , ListObjects , and ListTables API calls were made but how can you view the rest of the actions made by this user over the past hour or day? GuardDuty is able to analyze large volumes of data and identify true threats in your environment but from an investigation and remediation stand point it is still important to correlate other data to understand the full scope of the threat. In this case an analyst would use the details in this finding to pinpoint historical user activity in CloudTrail. AWS also has a threat hunting tool called Detective that can help with further investigation. Scenario Note These IAM findings are being generated by the \u201cmalicious EC2\u201d instance making API calls. These API calls generate findings because the EIP of that instance is in a custom threat list.","title":"Browse to the GuardDuty console to investigate"},{"location":"scenario2/#view-the-cloudwatch-event-rule","text":"Navigate to the CloudWatch console and on the left navigation, under the Events section, click Rules . Click on the rule that Alice configured for this particular finding ( GuardDuty-Event-IAMUser-MaliciousIPCaller ). Under the Targets section, you will see a rule for an SNS Topic. Turns out Alice did not set up a Lambda function to remediate this threat because the decision by the security team was to manually investigate and remediate this particular type of finding. Since GuardDuty integrates with CloudWatch Events you have the flexibility to put in place full or partial automated remediation workflows. These could be custom Lambda Functions that you build out or maybe even partner solutions. You can also configure other AWS Resources as targets in your CloudWatch Event Rules such as SSM Run Commands or Step Functions state machines. For some finding types you may choose to have only notification workflows and require manual remediation steps. As you design these workflows it is important to evaluate the workloads running in your environments to see what effects a remediation could have.","title":"View the CloudWatch Event rule"},{"location":"scenario2/#manually-remediate-the-finding","text":"Since Alice did not setup a remediation for this finding, you have to manually remediate this. While the security team is analyzing the previous activity of this user to better understand the scope of the compromise, you need to disable the access key associated with the user to prevent any more unauthorized actions. Browse to the AWS IAM console. Click Users in the left navigation. Click on the user you identified in the GuardDuty finding and email notifications ( GuardDuty-Example-Compromised-Simulated ). Click the Security Credentials tab. Under Access Keys , find the Access Key ID you identified in the finding, click Make Inactive and then click Deactivate .","title":"Manually remediate the finding"},{"location":"scenario2/#questions","text":"Which data source did GuardDuty use to identify this threat? What permissions did the user have? Why would the security team decide against setting up an automated remediation?","title":"Questions"},{"location":"scenario3/","text":"IAM Role credential exfiltration Generate a finding manually All of the simulated attacks and findings are generated automatically in the CloudFormation template except for one; which requires you to take some manual steps. To produce the final finding, you will need to copy the IAM temporary security credentials from the EC2 instance and manually make API calls from your laptop. API calls need to come from outside the AWS network or they will not generate findings Retrieve the IAM temporary security credentials using AWS Systems Manager To simulate this last and final attack you will need to retrieve the IAM temporary security credentials generated by the IAM Role for EC2. You can either SSH directly to the instance and query the metadata or follow the steps below to use AWS Systems Manager Session Manager (an SSM agent was automatically started on the instance at launch). Go to Fleet Manager within the AWS Systems Manager console (us-west-2). You should see an instance named GuardDuty-Example: Compromised Instance: Scenario 3 with a ping status of Online . To see the keys currently active on the instance, click on Session Manager on the left navigation and then click Start Session . To see the credentials currently active on the instance, click on the radio button next to Compromised Instance: Scenario 3 and click Start Session . Run the following command in the shell: curl http://169.254.169.254/latest/meta-data/iam/security-credentials/GuardDuty-Example-EC2-Compromised Make note of the AccessKeyID , SecretAccessKey , and Token . Create a new AWS CLI profile on your laptop to use the IAM temporary credentials Now that you have retrieved the IAM temporary security credentials you will need to add them to an AWS CLI profile. There are a number of ways to do this, but below are some commands to help get you started: From a command prompt, run the following commands (replace the variables with your credentials): aws configure set profile . badbob . region us - west - 2 aws configure set profile . badbob . aws_access_key_id < access_key > aws configure set profile . badbob . aws_secret_access_key < secret_key > aws configure set profile . badbob . aws_session_token < session_token > If you view your local aws credentials file, you should now see an [badbob] profile with the stolen IAM temporary credentials. Run commands using the IAM temporary credentials Now that you have your named profile you can use it to make API calls. Use the commands below to query different services to see what you have access to. Don't be surprised if you see some access denied responses, it is intended Do you have any IAM permissions: aws iam get-user --profile badbob aws iam create-user --user-name Chuck --profile badbob What about DynamoDB? aws dynamodb list-tables --profile badbob aws dynamodb describe-table --table-name GuardDuty-Example-Customer-DB --profile badbob Can you query the data? aws dynamodb scan --table-name GuardDuty-Example-Customer-DB --profile badbob aws dynamodb put-item --table-name GuardDuty-Example-Customer-DB --item '{\"name\":{\"S\":\"Joshua Tree\"},\"state\":{\"S\":\"Michigan\"},\"website\":{\"S\":\"https://www.nps.gov/yell/index.htm\"}}' --profile badbob aws dynamodb scan --table-name GuardDuty-Example-Customer-DB --profile badbob aws dynamodb delete-table --table-name GuardDuty-Example-Customer-DB --profile badbob aws dynamodb list-tables --profile badbob Do you have access to Systems Manager Parameter Store? aws ssm describe-parameters --profile badbob aws ssm get-parameters --names \"gd_prod_dbpwd_sample\" --profile badbob aws ssm get-parameters --names \"gd_prod_dbpwd_sample\" --with-decryption --profile badbob aws ssm delete-parameter --name \"gd_prod_dbpwd_sample\" --profile badbob After manually remediating the previous GuardDuty finding, you have finally finished your first cup of coffee when an email notification comes in alerting you to yet another finding. You finish reading the first email and then a minute or so later you see the relevant remediation email, meaning Alice has already put in place a remediation for this finding. The other findings you looked at dealt with EC2 instances and AWS IAM credentials separately, but this finding appears to be related to an AWS IAM Role associated with an EC2 instance. You decide to take a closer look at the finding and remediation. None of your personal IAM credentials have actually been compromised or exposed in any way. Architecture Overview The remote host accesses the compromised instance and exfiltrates the IAM role credentials via the metadata. The remote host sets up a CLI user to make API calls to the AWS account to which the credentials belong. GuardDuty generates a finding and sends this to the GuardDuty console and CloudWatch Events. The CloudWatch Event rule triggers an SNS topic and a Lambda function. SNS sends you an e-mail with the finding information. A Lambda function attaches a policy to the role revoking all active sessions. Investigation Browse to the GuardDuty console to investigate To view the findings: Navigate to the GuardDuty console (us-west-2) and then, in the navigation pane on the left, choose Current . Click the icon to refresh the GuardDuty console. You should see a finding with the type UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS . Click on the UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS finding to view the full details. Looking at the finding details you can see that this is actually a High Severity finding. This finding informs you of attempts to run AWS API operations from a host outside of EC2, using temporary AWS credentials that were created on an EC2 instance in your AWS account. This means your EC2 instance has been compromised, and the temporary credentials from the instance have been exfiltrated to a remote host outside of AWS. You will notice that each GuardDuty finding has an assigned severity level (low, medium, or high) that can help you determine your response to a potential security issue that is highlighted by the finding. These severity levels are preset by AWS but we have seen customers modify these values in their automation workflows to better align the risk of that finding in the context of their environment and requirements. View the CloudWatch Event rule Navigate to the CloudWatch console (us-west-2) and on the left navigation, under the Events section, click Rules . Click on the rule that Alice configured for this particular finding ( GuardDuty-Event-IAMUser-InstanceCredentialExfiltration ). Take a closer look at the Event Pattern . The pattern Alice setup for all the rules specifies particular findings. Like Alice, you can create CloudWatch Event Rules that are triggered for particular findings but you can also create a rule that is triggered based on any GuardDuty finding in order to have a centralized workflow. Below is an example of an Event Pattern that would trigger for any GuardDuty finding: { \"detail-type\": [ \"GuardDuty Finding\" ], \"source\": [ \"aws.guardduty\" ] } View the remediation Lambda function Alice also set up a remediation for this threat. Look through the Lambda Function code to better understand the remediation. Go to the Lambda console (us-west-2) and review the function named GuardDuty-Example-Remediation-InstanceCredentialExfiltration . The Lambda Function retrieves the Role name from the finding details and then attaches an IAM policy that revokes all active sessions for the role. What permissions does the Lambda Function need to perform the remediation? Is there a risk associated with this level of permissions? Verify that the remediation was successful To verify that the InstanceCredentialExfiltration finding was remediated, you can run one of the CLI commands you ran earlier. aws dynamodb list-tables --profile badbob You should see a response that states that there is an explicit deny for that action. Go view the Role to evaluate the policy that was attached. Browse to the AWS IAM console. Click Roles in the left navigation. Click on the Role you identified in the GuardDuty finding and email notifications ( GuardDuty-Example-EC2-Compromised ). Click the Permissions tab. Click on the RevokeOldSessions Policy. Questions What are the risks involved with this remediation? What other EC2 instances are using this Role?","title":"Index"},{"location":"scenario3/#iam-role-credential-exfiltration","text":"","title":"IAM Role credential exfiltration"},{"location":"scenario3/#generate-a-finding-manually","text":"All of the simulated attacks and findings are generated automatically in the CloudFormation template except for one; which requires you to take some manual steps. To produce the final finding, you will need to copy the IAM temporary security credentials from the EC2 instance and manually make API calls from your laptop. API calls need to come from outside the AWS network or they will not generate findings","title":"Generate a finding manually"},{"location":"scenario3/#retrieve-the-iam-temporary-security-credentials-using-aws-systems-manager","text":"To simulate this last and final attack you will need to retrieve the IAM temporary security credentials generated by the IAM Role for EC2. You can either SSH directly to the instance and query the metadata or follow the steps below to use AWS Systems Manager Session Manager (an SSM agent was automatically started on the instance at launch). Go to Fleet Manager within the AWS Systems Manager console (us-west-2). You should see an instance named GuardDuty-Example: Compromised Instance: Scenario 3 with a ping status of Online . To see the keys currently active on the instance, click on Session Manager on the left navigation and then click Start Session . To see the credentials currently active on the instance, click on the radio button next to Compromised Instance: Scenario 3 and click Start Session . Run the following command in the shell: curl http://169.254.169.254/latest/meta-data/iam/security-credentials/GuardDuty-Example-EC2-Compromised Make note of the AccessKeyID , SecretAccessKey , and Token .","title":"Retrieve the IAM temporary security credentials using AWS Systems Manager"},{"location":"scenario3/#create-a-new-aws-cli-profile-on-your-laptop-to-use-the-iam-temporary-credentials","text":"Now that you have retrieved the IAM temporary security credentials you will need to add them to an AWS CLI profile. There are a number of ways to do this, but below are some commands to help get you started: From a command prompt, run the following commands (replace the variables with your credentials): aws configure set profile . badbob . region us - west - 2 aws configure set profile . badbob . aws_access_key_id < access_key > aws configure set profile . badbob . aws_secret_access_key < secret_key > aws configure set profile . badbob . aws_session_token < session_token > If you view your local aws credentials file, you should now see an [badbob] profile with the stolen IAM temporary credentials.","title":"Create a new AWS CLI profile on your laptop to use the IAM temporary credentials"},{"location":"scenario3/#run-commands-using-the-iam-temporary-credentials","text":"Now that you have your named profile you can use it to make API calls. Use the commands below to query different services to see what you have access to. Don't be surprised if you see some access denied responses, it is intended Do you have any IAM permissions: aws iam get-user --profile badbob aws iam create-user --user-name Chuck --profile badbob What about DynamoDB? aws dynamodb list-tables --profile badbob aws dynamodb describe-table --table-name GuardDuty-Example-Customer-DB --profile badbob Can you query the data? aws dynamodb scan --table-name GuardDuty-Example-Customer-DB --profile badbob aws dynamodb put-item --table-name GuardDuty-Example-Customer-DB --item '{\"name\":{\"S\":\"Joshua Tree\"},\"state\":{\"S\":\"Michigan\"},\"website\":{\"S\":\"https://www.nps.gov/yell/index.htm\"}}' --profile badbob aws dynamodb scan --table-name GuardDuty-Example-Customer-DB --profile badbob aws dynamodb delete-table --table-name GuardDuty-Example-Customer-DB --profile badbob aws dynamodb list-tables --profile badbob Do you have access to Systems Manager Parameter Store? aws ssm describe-parameters --profile badbob aws ssm get-parameters --names \"gd_prod_dbpwd_sample\" --profile badbob aws ssm get-parameters --names \"gd_prod_dbpwd_sample\" --with-decryption --profile badbob aws ssm delete-parameter --name \"gd_prod_dbpwd_sample\" --profile badbob After manually remediating the previous GuardDuty finding, you have finally finished your first cup of coffee when an email notification comes in alerting you to yet another finding. You finish reading the first email and then a minute or so later you see the relevant remediation email, meaning Alice has already put in place a remediation for this finding. The other findings you looked at dealt with EC2 instances and AWS IAM credentials separately, but this finding appears to be related to an AWS IAM Role associated with an EC2 instance. You decide to take a closer look at the finding and remediation. None of your personal IAM credentials have actually been compromised or exposed in any way.","title":"Run commands using the IAM temporary credentials"},{"location":"scenario3/#architecture-overview","text":"The remote host accesses the compromised instance and exfiltrates the IAM role credentials via the metadata. The remote host sets up a CLI user to make API calls to the AWS account to which the credentials belong. GuardDuty generates a finding and sends this to the GuardDuty console and CloudWatch Events. The CloudWatch Event rule triggers an SNS topic and a Lambda function. SNS sends you an e-mail with the finding information. A Lambda function attaches a policy to the role revoking all active sessions.","title":"Architecture Overview"},{"location":"scenario3/#investigation","text":"","title":"Investigation"},{"location":"scenario3/#browse-to-the-guardduty-console-to-investigate","text":"To view the findings: Navigate to the GuardDuty console (us-west-2) and then, in the navigation pane on the left, choose Current . Click the icon to refresh the GuardDuty console. You should see a finding with the type UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS . Click on the UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS finding to view the full details. Looking at the finding details you can see that this is actually a High Severity finding. This finding informs you of attempts to run AWS API operations from a host outside of EC2, using temporary AWS credentials that were created on an EC2 instance in your AWS account. This means your EC2 instance has been compromised, and the temporary credentials from the instance have been exfiltrated to a remote host outside of AWS. You will notice that each GuardDuty finding has an assigned severity level (low, medium, or high) that can help you determine your response to a potential security issue that is highlighted by the finding. These severity levels are preset by AWS but we have seen customers modify these values in their automation workflows to better align the risk of that finding in the context of their environment and requirements.","title":"Browse to the GuardDuty console to investigate"},{"location":"scenario3/#view-the-cloudwatch-event-rule","text":"Navigate to the CloudWatch console (us-west-2) and on the left navigation, under the Events section, click Rules . Click on the rule that Alice configured for this particular finding ( GuardDuty-Event-IAMUser-InstanceCredentialExfiltration ). Take a closer look at the Event Pattern . The pattern Alice setup for all the rules specifies particular findings. Like Alice, you can create CloudWatch Event Rules that are triggered for particular findings but you can also create a rule that is triggered based on any GuardDuty finding in order to have a centralized workflow. Below is an example of an Event Pattern that would trigger for any GuardDuty finding: { \"detail-type\": [ \"GuardDuty Finding\" ], \"source\": [ \"aws.guardduty\" ] }","title":"View the CloudWatch Event rule"},{"location":"scenario3/#view-the-remediation-lambda-function","text":"Alice also set up a remediation for this threat. Look through the Lambda Function code to better understand the remediation. Go to the Lambda console (us-west-2) and review the function named GuardDuty-Example-Remediation-InstanceCredentialExfiltration . The Lambda Function retrieves the Role name from the finding details and then attaches an IAM policy that revokes all active sessions for the role. What permissions does the Lambda Function need to perform the remediation? Is there a risk associated with this level of permissions?","title":"View the remediation Lambda function"},{"location":"scenario3/#verify-that-the-remediation-was-successful","text":"To verify that the InstanceCredentialExfiltration finding was remediated, you can run one of the CLI commands you ran earlier. aws dynamodb list-tables --profile badbob You should see a response that states that there is an explicit deny for that action. Go view the Role to evaluate the policy that was attached. Browse to the AWS IAM console. Click Roles in the left navigation. Click on the Role you identified in the GuardDuty finding and email notifications ( GuardDuty-Example-EC2-Compromised ). Click the Permissions tab. Click on the RevokeOldSessions Policy.","title":"Verify that the remediation was successful"},{"location":"scenario3/#questions","text":"What are the risks involved with this remediation? What other EC2 instances are using this Role?","title":"Questions"},{"location":"scenario4/","text":"Compromised S3 Bucket (simulated) You were already having a rough morning, you just finished your coffee and see a few more findings related to S3 in the GuardDuty console. These are different from the the previously seen IAM and EC2 findings. None of your personal IAM credentials have actually been compromised or exposed in any way. Architecture Overview The malicious instance makes API calls. API calls are logged in CloudTrail GuardDuty is monitoring the CloudTrail management events and S3 data events (in addition to VPC Flow Logs and DNS Logs) and analyzing this based on threat list, machine learning, baselines, etc. GuardDuty generates findings and sends this to the GuardDuty console and CloudWatch Events. The CloudWatch Event rule triggers an SNS topic. SNS sends you an e-mail with the finding information. Investigation Browse to the GuardDuty console to investigate To view the findings: Navigate to the GuardDuty Console (us-west-2). Click the icon to refresh the GuardDuty console. You should now see additional findings that are related to Stealth:S3 and Policy:S3 . Based on the format you reviewed earlier can you determine the security issues by the finding type? Click on the Stealth:S3/ServerAccessLoggingDisabled finding to view the full details. You can see the finding details include information about what happened, what AWS resources were involved in the suspicious activity, when this activity took place, and other additional information. Under Resource Affected , find the S3 bucket associated with this finding. This finding informs you that S3 server access logging is disabled for a bucket within your AWS environment. If disabled, no logs are created for any actions taken on the S3 bucket or on the objects in the bucket, unless S3 object level logging is enabled. Even though this is a low severity finding, it is important to investigate why would someone disable logging as this can be used to cover up changes that otherwise should not have been made. To learn more, see S3 Server Access Logging . Lets look at another one, click on Policy:S3/BucketBlockPublicAccessDisabled . This finding is generated when block public access settings are disabled, if they were previously enabled. This could be a legit activity or an innocent user could have accidentally changed the bucket settings. In such a situation it is always good to confirm with the bucket owner if this was an expected condition. But given the context of what is going on with this bucket where we also saw bucket logging being disabled, this seems more suspicious. What actions did this IAM User take? Click on each of the findings, You can see under Action and then API to know about the API calls that were made. Are these management events or data plane events? GuardDuty is able to analyze large volumes of data and identify true threats in your environment but from an investigation and remediation stand point it is still important to correlate other data to understand the full scope of the threat. In this case an analyst would use the details in this finding to pinpoint historical user activity in CloudTrail. AWS also has a investigation tool called Amazon Detective that can help with further investigation and analyze the root cause of security issue. Scenario Note These IAM findings are being generated by the \u201cmalicious EC2\u201d instance making API calls. These API calls generate findings because GuardDuty is looking for such S3 control plane and data plane API activity that can disable S3 logging and S3 block public access setttings. The bucket has not been exposed in any way, if you go to the S3 console the public block settings at the account level are still enabled. GuardDuty S3 Protection S3 protection enables Amazon GuardDuty to monitor object-level API operations to identify potential security risks for data within S3 buckets. GuardDuty monitors threats against Amazon S3 resources by analyzing AWS CloudTrail management events and CloudTrail S3 data events. These data sources monitor different kinds of activity, for example, CloudTrail management events for S3 include operations that list or configure S3 buckets, such as ListBuckets, DeleteBuckets, and PutBucketReplication. Examples of data events for S3 include object-level API operations, such as GetObject, ListObjects, DeleteObject, and PutObject. GuardDuty monitoring of CloudTrail management events is on by default for all accounts that have enabled GuardDuty and is not configurable. However, S3 data event logs are a configurable data source in GuardDuty. The processes for enabling or disabling S3 data event monitoring is part of Configuring S3 protection for an individual account documentation. View the CloudWatch Event rule Navigate to the CloudWatch console and on the left navigation, under the Events section, click Rules . Click on the rule that Alice configured for this particular finding ( GuardDuty-Event-S3-Stealth-Policy ). Under the Targets section, you will see a rule for an SNS Topic. Turns out Alice did not set up a Lambda function to remediate this threat either because the team is investigating using AWS Config managed rules to autoremediate such findings. Observe the input transformer, how would you modify this setting to get any additional data you need in the SNS email ? GuardDuty can also send its finding to Security Hub (if enabled) which helps aggregate findings from different AWS services as well as partner services. Security hub can then be used to take custom actions on these findings by using CloudWatch Event rules to send the findings to ticketing, chat, Security Information and Event Management (SIEM), Security Orchestration Automation and Response (SOAR), and incident management tools or to custom remediation playbooks. Manually remediate S3 bucket Since the bucket settings were changed you confirmed with the bucket owner that those changes need to be reverted back. Browse to the AWS S3 console. Click guardduty-example-finance bucket in the bucket list. Click on the properties tab, scroll down to Server Access Logging , and click Edit , then Enable . Now click Browse S3 button and select the guardduty-example-log and click choose path . Finally click Save changes button and you have enabled server access logging. For making the bucket private again, click on the Permissions tab, and edit the Block public access (bucket setting) Check Block all public access box, then click Save changes and type 'confirm' in the dialogue box that appears. Now you have made the bucket private again. Note Another option for customers to protect against unintentional bucket exposures is to add service control policies (SCP). an SCP defines a guardrail, or sets limits, on the actions that the account's administrator can delegate to the IAM users and roles in the accounts. Manually remediate the compromised IAM user through which the bucket settings were changed. While the security team is analyzing the previous activity of this user to better understand the scope of the compromise, you need to disable the access key associated with the user to prevent any more unauthorized actions just like you did in \"Compromised IAM Credentials\" Scenario. Browse to the AWS IAM console. Click Users in the left navigation. Click on the user you identified in the GuardDuty finding and email notifications ( GuardDuty-Example-Compromised2-Simulated ). Click the Security Credentials tab. Under Access Keys , find the Access Key ID you identified in the finding and click Make Inactive . Questions Which data source did GuardDuty use to identify this threat? Was the bucket actually exposed to the Internet? Why is the severity of both these findings 'Low'? How would you protect unauthorized access of Access Keys?","title":"Index"},{"location":"scenario4/#compromised-s3-bucket-simulated","text":"You were already having a rough morning, you just finished your coffee and see a few more findings related to S3 in the GuardDuty console. These are different from the the previously seen IAM and EC2 findings. None of your personal IAM credentials have actually been compromised or exposed in any way.","title":"Compromised S3 Bucket (simulated)"},{"location":"scenario4/#architecture-overview","text":"The malicious instance makes API calls. API calls are logged in CloudTrail GuardDuty is monitoring the CloudTrail management events and S3 data events (in addition to VPC Flow Logs and DNS Logs) and analyzing this based on threat list, machine learning, baselines, etc. GuardDuty generates findings and sends this to the GuardDuty console and CloudWatch Events. The CloudWatch Event rule triggers an SNS topic. SNS sends you an e-mail with the finding information.","title":"Architecture Overview"},{"location":"scenario4/#investigation","text":"","title":"Investigation"},{"location":"scenario4/#browse-to-the-guardduty-console-to-investigate","text":"To view the findings: Navigate to the GuardDuty Console (us-west-2). Click the icon to refresh the GuardDuty console. You should now see additional findings that are related to Stealth:S3 and Policy:S3 . Based on the format you reviewed earlier can you determine the security issues by the finding type? Click on the Stealth:S3/ServerAccessLoggingDisabled finding to view the full details. You can see the finding details include information about what happened, what AWS resources were involved in the suspicious activity, when this activity took place, and other additional information. Under Resource Affected , find the S3 bucket associated with this finding. This finding informs you that S3 server access logging is disabled for a bucket within your AWS environment. If disabled, no logs are created for any actions taken on the S3 bucket or on the objects in the bucket, unless S3 object level logging is enabled. Even though this is a low severity finding, it is important to investigate why would someone disable logging as this can be used to cover up changes that otherwise should not have been made. To learn more, see S3 Server Access Logging . Lets look at another one, click on Policy:S3/BucketBlockPublicAccessDisabled . This finding is generated when block public access settings are disabled, if they were previously enabled. This could be a legit activity or an innocent user could have accidentally changed the bucket settings. In such a situation it is always good to confirm with the bucket owner if this was an expected condition. But given the context of what is going on with this bucket where we also saw bucket logging being disabled, this seems more suspicious. What actions did this IAM User take? Click on each of the findings, You can see under Action and then API to know about the API calls that were made. Are these management events or data plane events? GuardDuty is able to analyze large volumes of data and identify true threats in your environment but from an investigation and remediation stand point it is still important to correlate other data to understand the full scope of the threat. In this case an analyst would use the details in this finding to pinpoint historical user activity in CloudTrail. AWS also has a investigation tool called Amazon Detective that can help with further investigation and analyze the root cause of security issue. Scenario Note These IAM findings are being generated by the \u201cmalicious EC2\u201d instance making API calls. These API calls generate findings because GuardDuty is looking for such S3 control plane and data plane API activity that can disable S3 logging and S3 block public access setttings. The bucket has not been exposed in any way, if you go to the S3 console the public block settings at the account level are still enabled. GuardDuty S3 Protection S3 protection enables Amazon GuardDuty to monitor object-level API operations to identify potential security risks for data within S3 buckets. GuardDuty monitors threats against Amazon S3 resources by analyzing AWS CloudTrail management events and CloudTrail S3 data events. These data sources monitor different kinds of activity, for example, CloudTrail management events for S3 include operations that list or configure S3 buckets, such as ListBuckets, DeleteBuckets, and PutBucketReplication. Examples of data events for S3 include object-level API operations, such as GetObject, ListObjects, DeleteObject, and PutObject. GuardDuty monitoring of CloudTrail management events is on by default for all accounts that have enabled GuardDuty and is not configurable. However, S3 data event logs are a configurable data source in GuardDuty. The processes for enabling or disabling S3 data event monitoring is part of Configuring S3 protection for an individual account documentation.","title":"Browse to the GuardDuty console to investigate"},{"location":"scenario4/#view-the-cloudwatch-event-rule","text":"Navigate to the CloudWatch console and on the left navigation, under the Events section, click Rules . Click on the rule that Alice configured for this particular finding ( GuardDuty-Event-S3-Stealth-Policy ). Under the Targets section, you will see a rule for an SNS Topic. Turns out Alice did not set up a Lambda function to remediate this threat either because the team is investigating using AWS Config managed rules to autoremediate such findings. Observe the input transformer, how would you modify this setting to get any additional data you need in the SNS email ? GuardDuty can also send its finding to Security Hub (if enabled) which helps aggregate findings from different AWS services as well as partner services. Security hub can then be used to take custom actions on these findings by using CloudWatch Event rules to send the findings to ticketing, chat, Security Information and Event Management (SIEM), Security Orchestration Automation and Response (SOAR), and incident management tools or to custom remediation playbooks.","title":"View the CloudWatch Event rule"},{"location":"scenario4/#manually-remediate-s3-bucket","text":"Since the bucket settings were changed you confirmed with the bucket owner that those changes need to be reverted back. Browse to the AWS S3 console. Click guardduty-example-finance bucket in the bucket list. Click on the properties tab, scroll down to Server Access Logging , and click Edit , then Enable . Now click Browse S3 button and select the guardduty-example-log and click choose path . Finally click Save changes button and you have enabled server access logging. For making the bucket private again, click on the Permissions tab, and edit the Block public access (bucket setting) Check Block all public access box, then click Save changes and type 'confirm' in the dialogue box that appears. Now you have made the bucket private again. Note Another option for customers to protect against unintentional bucket exposures is to add service control policies (SCP). an SCP defines a guardrail, or sets limits, on the actions that the account's administrator can delegate to the IAM users and roles in the accounts.","title":"Manually remediate S3 bucket"},{"location":"scenario4/#manually-remediate-the-compromised-iam-user-through-which-the-bucket-settings-were-changed","text":"While the security team is analyzing the previous activity of this user to better understand the scope of the compromise, you need to disable the access key associated with the user to prevent any more unauthorized actions just like you did in \"Compromised IAM Credentials\" Scenario. Browse to the AWS IAM console. Click Users in the left navigation. Click on the user you identified in the GuardDuty finding and email notifications ( GuardDuty-Example-Compromised2-Simulated ). Click the Security Credentials tab. Under Access Keys , find the Access Key ID you identified in the finding and click Make Inactive .","title":"Manually remediate the compromised IAM user through which the bucket settings were changed."},{"location":"scenario4/#questions","text":"Which data source did GuardDuty use to identify this threat? Was the bucket actually exposed to the Internet? Why is the severity of both these findings 'Low'? How would you protect unauthorized access of Access Keys?","title":"Questions"}]}